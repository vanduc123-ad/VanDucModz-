--[[
  ModzRO - Full Read-Only Vietnamese UI (Single file)
  - Paste v√†o KRNL while in-game (v√≠ d·ª• Blox Fruits)
  - Read-only: ch·ªâ hi·ªÉn th·ªã info, ko teleport, ko cframe thay ƒë·ªïi, ko farm
  - UI scale-based, tabs fixed, smooth transitions, Vietnamese text
--]]

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local Lighting = game:GetService("Lighting")

local LocalPlayer = Players.LocalPlayer

-- CONFIG (scale values so it doesn't overflow screen)
local CONF = {
    WIDTH_SCALE = 0.60,     -- menu width % of screen
    HEIGHT_SCALE = 0.66,    -- menu height % of screen
    ACCENT = Color3.fromRGB(45,155,255),
    BACK = Color3.fromRGB(18,18,20),
    CARD = Color3.fromRGB(34,34,36),
    TEXT = Color3.fromRGB(235,235,240),
    MUTED = Color3.fromRGB(150,150,160),
    FONT = Enum.Font.GothamSemibold,
    EVENT_REFRESH = 60,
    BOSS_REFRESH = 6,
    MAP_UPDATE = 0.7,
    TWEEN = 0.18,
    TAB_BUTTON_HEIGHT = 56,
}

-- safe create
local function new(class, props)
    local obj = Instance.new(class)
    if props then
        for k,v in pairs(props) do
            if k == "Parent" then
                obj.Parent = v
            else
                pcall(function() obj[k] = v end)
            end
        end
    end
    return obj
end

-- cleanup old UI if exists
pcall(function()
    local old = CoreGui:FindFirstChild("ModzRO_FixedUI")
    if old then old:Destroy() end
end)

-- ScreenGui
local screen = new("ScreenGui", {Name = "ModzRO_FixedUI", Parent = CoreGui, ResetOnSpawn = false})
screen.IgnoreGuiInset = true
screen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Optional blur (toggle when opening)
local blur = Lighting:FindFirstChild("ModzROBlur")
if not blur then
    blur = new("BlurEffect", {Name = "ModzROBlur", Parent = Lighting, Size = 0, Enabled = false})
end

-- Toggle button (draggable)
local toggle = new("ImageButton", {
    Parent = screen,
    Name = "MG_Toggle",
    Size = UDim2.new(0,64,0,64),
    Position = UDim2.new(0.02,0,0.08,0),
    BackgroundColor3 = CONF.ACCENT,
    AutoButtonColor = false,
    ZIndex = 999
})
new("UICorner", {Parent = toggle, CornerRadius = UDim.new(1,0)})
toggle.Image = ""
local tlabel = new("TextLabel", {Parent = toggle, Size = UDim2.fromScale(1,1), BackgroundTransparency = 1, Text = "MG", Font = CONF.FONT, TextSize = 26, TextColor3 = Color3.new(1,1,1)})
toggle.Active = true

-- Main window (centered, scale-based)
local main = new("Frame", {
    Parent = screen,
    Name = "MainWindow",
    Size = UDim2.new(CONF.WIDTH_SCALE, 0, CONF.HEIGHT_SCALE, 0),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    AnchorPoint = Vector2.new(0.5, 0.5),
    BackgroundColor3 = CONF.BACK,
    Visible = true,
    ZIndex = 998,
})
new("UICorner", {Parent = main, CornerRadius = UDim.new(0,12)})
local mainStroke = new("UIStroke", {Parent = main, Color = CONF.ACCENT, Thickness = 1})

-- Header
local header = new("Frame", {Parent = main, Size = UDim2.new(1,0,0,66), BackgroundColor3 = CONF.CARD})
new("UICorner", {Parent = header, CornerRadius = UDim.new(0,12)})
local title = new("TextLabel", {Parent = header, Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1, Text = "‚ö° Modz Read-Only Menu ‚ö°", Font = CONF.FONT, TextSize = 20, TextColor3 = CONF.TEXT})
local btnClose = new("TextButton", {Parent = header, Size = UDim2.new(0,38,0,38), Position = UDim2.new(1,-52,0,14), BackgroundColor3 = CONF.CARD, Text = "‚úï", Font = CONF.FONT, TextSize = 18, TextColor3 = CONF.TEXT, AutoButtonColor = false})
new("UICorner", {Parent = btnClose, CornerRadius = UDim.new(0,8)})

-- Body layout
local body = new("Frame", {Parent = main, Position = UDim2.new(0,0,0,66), Size = UDim2.new(1,0,1,-66), BackgroundTransparency = 1})
-- left sidebar (28% width), right content (72%)
local sidebar = new("Frame", {Parent = body, Position = UDim2.new(0,12,0,12), Size = UDim2.new(0.28, -24, 1, -24), BackgroundColor3 = CONF.CARD})
new("UICorner", {Parent = sidebar, CornerRadius = UDim.new(0,10)})
local content = new("Frame", {Parent = body, Position = UDim2.new(0.28, 12, 0,12), Size = UDim2.new(0.72, -36, 1, -24), BackgroundColor3 = Color3.fromRGB(36,36,38)})
new("UICorner", {Parent = content, CornerRadius = UDim.new(0,10)})
new("UIStroke", {Parent = content, Color = Color3.fromRGB(50,50,54), Thickness = 1})

-- sidebar header (logo + name)
local logoArea = new("Frame", {Parent = sidebar, Size = UDim2.new(1, -24, 0, 110), Position = UDim2.new(0,12,0,12), BackgroundTransparency = 1})
local logoImg = new("ImageLabel", {Parent = logoArea, Size = UDim2.new(0,72,0,72), Position = UDim2.new(0,8,0,14), BackgroundTransparency = 1, Image = ""})
new("UICorner", {Parent = logoImg, CornerRadius = UDim.new(1,0)})
new("TextLabel", {Parent = logoArea, Position = UDim2.new(0,92,0,20), Size = UDim2.new(1,-100,0,60), BackgroundTransparency = 1, Text = "Modz Menu (Read-only)", Font = CONF.FONT, TextSize = 16, TextColor3 = CONF.TEXT, TextXAlignment = Enum.TextXAlignment.Left})

-- tab container with UIListLayout to ensure equal spacing
local tabContainer = new("Frame", {Parent = sidebar, Position = UDim2.new(0,12,0,132), Size = UDim2.new(1,-24,1,-144), BackgroundTransparency = 1})
local tabLayout = new("UIListLayout", {Parent = tabContainer, Padding = UDim.new(0,10), SortOrder = Enum.SortOrder.LayoutOrder})
tabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

-- Tabs definitions (Vietnamese)
local TABS = {
    {id="server", name="Th√¥ng tin Server", icon="üìä"},
    {id="map", name="Map", icon="üó∫Ô∏è"},
    {id="settings", name="C√†i ƒê·∫∑t", icon="‚öôÔ∏è"},
    {id="events", name="S·ª± ki·ªán Hot", icon="üì∞"},
    {id="boss", name="Boss", icon="üëπ"},
    {id="teleport", name="Teleport (hi·ªÉn th·ªã)", icon="‚úàÔ∏è"},
}

-- create pages and tab buttons
local pages = {}
local tabBtns = {}
local function createTabBtn(def)
    local btn = new("TextButton", {Parent = tabContainer, Size = UDim2.new(1,0,0,CONF.TAB_BUTTON_HEIGHT), BackgroundColor3 = Color3.fromRGB(52,52,55), AutoButtonColor = false})
    new("UICorner", {Parent = btn, CornerRadius = UDim.new(0,8)})
    new("UIStroke", {Parent = btn, Color = Color3.fromRGB(50,50,54), Thickness = 1})
    new("TextLabel", {Parent = btn, Position = UDim2.new(0,12,0,8), Size = UDim2.new(0,36,0,36), BackgroundTransparency = 1, Text = def.icon, Font = CONF.FONT, TextSize = 20, TextColor3 = CONF.TEXT})
    new("TextLabel", {Parent = btn, Position = UDim2.new(0,60,0,8), Size = UDim2.new(1,-76,0,36), BackgroundTransparency = 1, Text = def.name, Font = CONF.FONT, TextSize = 15, TextColor3 = CONF.TEXT, TextXAlignment = Enum.TextXAlignment.Left})
    return btn
end

for i,def in ipairs(TABS) do
    local btn = createTabBtn(def)
    tabBtns[def.id] = btn
    local page = new("Frame", {Parent = content, Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1, Visible = (i==1)})
    if i~=1 then page.Position = UDim2.new(1,0,0,0) end
    pages[def.id] = page

    btn.MouseButton1Click:Connect(function()
        -- reset color
        for _,b in pairs(tabBtns) do if b:IsA("TextButton") then b.BackgroundColor3 = Color3.fromRGB(52,52,55) end end
        btn.BackgroundColor3 = Color3.fromRGB(68,68,72)
        -- animate old page out, show new
        for name,p in pairs(pages) do
            if p.Visible and name ~= def.id then
                TweenService:Create(p, TweenInfo.new(CONF.TWEEN, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = UDim2.new(-1,0,0,0)}):Play()
                delay(CONF.TWEEN, function() p.Visible = false end)
            end
        end
        pages[def.id].Visible = true
        pages[def.id].Position = UDim2.new(1,0,0,0)
        TweenService:Create(pages[def.id], TweenInfo.new(CONF.TWEEN, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0,0,0,0)}):Play()
    end)
end
tabBtns["server"].BackgroundColor3 = Color3.fromRGB(68,68,72)

-- small helper for label rows
local function labelRow(parent, y, leftText, init)
    local frame = new("Frame", {Parent = parent, Position = UDim2.new(0,16,0,y), Size = UDim2.new(1,-32,0,28), BackgroundTransparency = 1})
    local left = new("TextLabel", {Parent = frame, Size = UDim2.new(0.6,0,1,0), BackgroundTransparency = 1, Text = leftText, Font = CONF.FONT, TextSize = 14, TextColor3 = CONF.MUTED, TextXAlignment = Enum.TextXAlignment.Left})
    local right = new("TextLabel", {Parent = frame, Position = UDim2.new(0.6,0,0,0), Size = UDim2.new(0.4,0,1,0), BackgroundTransparency = 1, Text = init or "-", Font = CONF.FONT, TextSize = 14, TextColor3 = CONF.TEXT, TextXAlignment = Enum.TextXAlignment.Right})
    return {Frame = frame, Left = left, Right = right}
end

-- -------------------------
-- Page: Th√¥ng tin Server
-- -------------------------
do
    local p = pages["server"]
    new("TextLabel", {Parent = p, Position = UDim2.new(0,16,0,12), Size = UDim2.new(1,-32,0,22), BackgroundTransparency = 1, Text = "Th√¥ng tin Server (Realtime)", Font = CONF.FONT, TextSize = 16, TextColor3 = CONF.TEXT})
    local card = new("Frame", {Parent = p, Position = UDim2.new(0,16,0,46), Size = UDim2.new(1,-32,0,260), BackgroundColor3 = CONF.CARD})
    new("UICorner", {Parent = card, CornerRadius = UDim.new(0,8)})
    local rName = labelRow(card, 8, "Ng∆∞·ªùi ch∆°i", LocalPlayer.Name)
    local rId   = labelRow(card, 8+34, "UserId", tostring(LocalPlayer.UserId))
    local rLv   = labelRow(card, 8+68, "Level", "-")
    local rBeli = labelRow(card, 8+102, "Beli", "-")
    local rRace = labelRow(card, 8+136, "Race", "-")
    local rFruit= labelRow(card, 8+170, "Tr√°i √Åc Qu·ª∑", "-")

    local perf = new("Frame", {Parent = p, Position = UDim2.new(0,16,0,320), Size = UDim2.new(1,-32,0,80), BackgroundColor3 = CONF.CARD})
    new("UICorner", {Parent = perf, CornerRadius = UDim.new(0,8)})
    local rFps = labelRow(perf, 8, "FPS", "0")
    local rPing = labelRow(perf, 8+34, "Ping", "‚Äî")

    -- FPS calculation
    spawn(function()
        local last = tick(); local frames = 0
        while true do
            frames = frames + 1
            local now = tick()
            if now - last >= 0.6 then
                local fps = math.floor(frames / (now - last) + 0.5)
                if main.Visible then pcall(function() rFps.Right.Text = tostring(fps) end) end
                frames = 0; last = now
            end
            RunService.RenderStepped:Wait()
        end
    end)

    -- update player info loop (active only when main.Visible)
    spawn(function()
        while true do
            if main.Visible then
                pcall(function()
                    local function try(...)
                        for _,n in ipairs({...}) do
                            if LocalPlayer:FindFirstChild("Data") and LocalPlayer.Data:FindFirstChild(n) then return tostring(LocalPlayer.Data[n].Value) end
                            if LocalPlayer:FindFirstChild("leaderstats") and LocalPlayer.leaderstats:FindFirstChild(n) then return tostring(LocalPlayer.leaderstats[n].Value) end
                        end
                        return "-"
                    end
                    rLv.Right.Text = try("Level","level","Lvl")
                    rBeli.Right.Text = try("Beli","Money","Beli")
                    rRace.Right.Text = try("Race","race")
                    local fruit = try("DevilFruit","Fruit","DevilFruit")
                    rFruit.Right.Text = (fruit and fruit ~= "-" and tostring(fruit)) or "Kh√¥ng"
                    local net = Stats:FindFirstChild("Network")
                    if net and net:FindFirstChild("Data Ping") then rPing.Right.Text = tostring(math.floor(net["Data Ping"].Value)).." ms" else rPing.Right.Text = "‚Äî" end
                end)
                task.wait(0.9)
            else
                task.wait(0.7)
            end
        end
    end)
end

-- -------------------------
-- Page: Map (v·ªã tr√≠ hi·ªán t·∫°i)
-- -------------------------
local ISLANDS = {
    {name="Starter Island", emoji="üèùÔ∏è", min=Vector3.new(-1400,-500,-1400), max=Vector3.new(1400,900,1400), pos=Vector3.new(0,10,0)},
    {name="Jungle Island", emoji="üå¥", min=Vector3.new(600,-300,-900), max=Vector3.new(1800,900,900), pos=Vector3.new(1200,40,0)},
    {name="Desert Island", emoji="üèúÔ∏è", min=Vector3.new(1900,-300,-900), max=Vector3.new(3200,900,900), pos=Vector3.new(2500,40,0)},
    {name="Sky Island", emoji="‚òÅÔ∏è", min=Vector3.new(-2200,800,-2200), max=Vector3.new(-1100,2200,2200), pos=Vector3.new(-1500,1200,0)},
    {name="Marine Fortress", emoji="‚öì", min=Vector3.new(3400,-200,-900), max=Vector3.new(4200,900,900), pos=Vector3.new(3800,60,0)},
}

local function inside(minv, maxv, p)
    return p.X >= minv.X and p.X <= maxv.X and p.Y >= minv.Y and p.Y <= maxv.Y and p.Z >= minv.Z and p.Z <= maxv.Z
end

do
    local p = pages["map"]
    new("TextLabel", {Parent = p, Position = UDim2.new(0,16,0,12), Size = UDim2.new(1,-32,0,22), BackgroundTransparency = 1, Text = "Map & V·ªã tr√≠", Font = CONF.FONT, TextSize = 16, TextColor3 = CONF.TEXT})
    local card = new("Frame", {Parent = p, Position = UDim2.new(0,16,0,44), Size = UDim2.new(1,-32,0,336), BackgroundColor3 = CONF.CARD})
    new("UICorner", {Parent = card, CornerRadius = UDim.new(0,8)})
    local curIsland = labelRow(card, 8, "ƒê·∫£o hi·ªán t·∫°i", "ƒêang d√≤...")
    local coords = labelRow(card, 8+34, "To·∫° ƒë·ªô (X,Y,Z)", "-")
    local lbl = new("TextLabel", {Parent = card, Position = UDim2.new(0,16,0,120), Size = UDim2.new(1,-32,0,20), BackgroundTransparency = 1, Text = "Danh s√°ch ƒë·∫£o (ch·ªâ hi·ªÉn th·ªã)", Font = CONF.FONT, TextSize = 13, TextColor3 = CONF.MUTED})
    local scroll = new("ScrollingFrame", {Parent = card, Position = UDim2.new(0,12,0,144), Size = UDim2.new(1,-24,1,-156), BackgroundTransparency = 1, CanvasSize = UDim2.new(0,0,0,0), ScrollBarThickness = 8})
    new("UIListLayout", {Parent = scroll, Padding = UDim.new(0,8)})

    for _,inf in ipairs(ISLANDS) do
        local row = new("Frame", {Parent = scroll, Size = UDim2.new(1,0,0,40), BackgroundColor3 = Color3.fromRGB(48,48,50)})
        new("UICorner", {Parent = row, CornerRadius = UDim.new(0,8)})
        new("TextLabel", {Parent = row, Position = UDim2.new(0,12,0,6), Size = UDim2.new(0.7,-12,0,28), BackgroundTransparency = 1, Text = inf.emoji.." "..inf.name, Font = CONF.FONT, TextSize = 14, TextColor3 = CONF.TEXT, TextXAlignment = Enum.TextXAlignment.Left})
        new("TextLabel", {Parent = row, Position = UDim2.new(0.7,12,0,6), Size = UDim2.new(0.3,-24,0,28), BackgroundTransparency = 1, Text = "(hi·ªÉn th·ªã)", Font = CONF.FONT, TextSize = 12, TextColor3 = CONF.MUTED, TextXAlignment = Enum.TextXAlignment.Right})
    end
    task.wait(0.05)
    -- recalc canvas
    local function recalc()
        local tot = 0
        for _,c in ipairs(scroll:GetChildren()) do if c:IsA("Frame") then tot = tot + c.Size.Y.Offset + 8 end end
        scroll.CanvasSize = UDim2.new(0,0,0,tot + 12)
    end
    recalc()

    spawn(function()
        while true do
            if main.Visible then
                local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    local pos = hrp.Position
                    coords.Right.Text = string.format("X:%d  Y:%d  Z:%d", math.floor(pos.X), math.floor(pos.Y), math.floor(pos.Z))
                    local foundName, emoji = "Kh√¥ng r√µ", "‚ùì"
                    for _,inf in ipairs(ISLANDS) do
                        if inside(inf.min, inf.max, pos) then foundName, emoji = inf.name, inf.emoji; break end
                    end
                    curIsland.Right.Text = tostring(emoji).." "..foundName
                else
                    coords.Right.Text = "N/A"; curIsland.Right.Text = "Kh√¥ng c√≥ nh√¢n v·∫≠t"
                end
                task.wait(CONF.MAP_UPDATE)
            else
                task.wait(0.7)
            end
        end
    end)
end

-- -------------------------
-- Page: S·ª± ki·ªán Hot (Vietnamese)
-- -------------------------
do
    local p = pages["events"]
    new("TextLabel", {Parent = p, Position = UDim2.new(0,16,0,12), Size = UDim2.new(1,-32,0,22), BackgroundTransparency = 1, Text = "S·ª± ki·ªán Hot (Qu√©t ReplicatedStorage/Workspace)", Font = CONF.FONT, TextSize = 16, TextColor3 = CONF.TEXT})
    local scroll = new("ScrollingFrame", {Parent = p, Position = UDim2.new(0,16,0,44), Size = UDim2.new(1,-32,1,-56), BackgroundTransparency = 1, CanvasSize = UDim2.new(0,0,0,0), ScrollBarThickness = 8})
    new("UIListLayout", {Parent = scroll, Padding = UDim.new(0,8)})

    local function clearAll()
        for _,c in ipairs(scroll:GetChildren()) do if c:IsA("Frame") then c:Destroy() end end
    end

    local function makeCard(title, dateStr, desc, state)
        local card = new("Frame", {Parent = scroll, Size = UDim2.new(1,-12,0,88), BackgroundColor3 = CONF.CARD})
        new("UICorner", {Parent = card, CornerRadius = UDim.new(0,8)})
        new("UIStroke", {Parent = card, Color = Color3.fromRGB(50,50,54), Thickness = 1})
        new("TextLabel", {Parent = card, Position = UDim2.new(0,12,0,8), Size = UDim2.new(1,-24,0,20), BackgroundTransparency = 1, Text = title, Font = CONF.FONT, TextSize = 15, TextColor3 = CONF.TEXT})
        new("TextLabel", {Parent = card, Position = UDim2.new(0,12,0,30), Size = UDim2.new(1,-24,0,16), BackgroundTransparency = 1, Text = "Th·ªùi gian: "..dateStr, Font = CONF.FONT, TextSize = 12, TextColor3 = CONF.MUTED})
        local st = state or "ƒêang di·ªÖn ra"
        new("TextLabel", {Parent = card, Position = UDim2.new(0,12,0,46), Size = UDim2.new(1,-24,0,36), BackgroundTransparency = 1, Text = desc.."\nTr·∫°ng th√°i: "..st, Font = CONF.FONT, TextSize = 13, TextColor3 = CONF.TEXT, TextWrapped = true})
    end

    local function scanEvents()
        local out = {}
        pcall(function()
            -- check ReplicatedStorage.Events
            if ReplicatedStorage:FindFirstChild("Events") then
                for _,v in ipairs(ReplicatedStorage.Events:GetChildren()) do
                    table.insert(out, {title = "S·ª± ki·ªán: "..tostring(v.Name), date = os.date("%d/%m/%Y %H:%M:%S"), desc = "S·ª± ki·ªán ƒë∆∞·ª£c li·ªát k√™ trong ReplicatedStorage.", state = "Th√¥ng tin c√≥ s·∫µn"})
                end
            end
            -- search workspace for "Event" or "SuKien" patterns
            for _,obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("Model") and tostring(obj.Name):lower():find("event") or tostring(obj.Name):lower():find("sukien") then
                    table.insert(out, {title = "S·ª± ki·ªán: "..tostring(obj.Name), date = os.date("%d/%m/%Y %H:%M:%S"), desc = "S·ª± ki·ªán xu·∫•t hi·ªán trong workspace.", state = "ƒêang di·ªÖn ra"})
                end
            end
        end)
        if #out == 0 then table.insert(out, {title = "Kh√¥ng t√¨m th·∫•y s·ª± ki·ªán", date = os.date("%d/%m/%Y %H:%M:%S"), desc = "Kh√¥ng c√≥ s·ª± ki·ªán ƒë∆∞·ª£c ph√°t hi·ªán trong ReplicatedStorage ho·∫∑c workspace.", state = "Kh√¥ng c√≥"}) end
        return out
    end

    local function refresh()
        clearAll()
        local arr = scanEvents()
        for _,ev in ipairs(arr) do makeCard(ev.title, ev.date, ev.desc, ev.state) end
        task.wait(0.05)
        local tot = 0
        for _,v in ipairs(scroll:GetChildren()) do if v:IsA("Frame") then tot = tot + v.Size.Y.Offset + 8 end end
        scroll.CanvasSize = UDim2.new(0,0,0,tot + 12)
    end

    refresh()
    spawn(function()
        while true do
            if main.Visible then refresh(); task.wait(CONF.EVENT_REFRESH) else task.wait(1) end
        end
    end)
end

-- -------------------------
-- Page: Boss (green/red icons)
-- -------------------------
do
    local p = pages["boss"]
    new("TextLabel", {Parent = p, Position = UDim2.new(0,16,0,12), Size = UDim2.new(1,-32,0,22), BackgroundTransparency = 1, Text = "Danh s√°ch Boss (Qu√©t workspace)", Font = CONF.FONT, TextSize = 16, TextColor3 = CONF.TEXT})
    local scroll = new("ScrollingFrame", {Parent = p, Position = UDim2.new(0,16,0,44), Size = UDim2.new(1,-32,1,-56), BackgroundTransparency = 1, CanvasSize = UDim2.new(0,0,0,0), ScrollBarThickness = 8})
    new("UIListLayout", {Parent = scroll, Padding = UDim.new(0,8)})

    -- Known boss keywords for Blox Fruits (expandable)
    local KNOWN_BOSS_KEYWORDS = {
        "boss", "raid", "mobs", "giant", "admiral", "yeti", "dragon", "marine", "seaboss", "mysterious", "swordman", "don", "swan", "boss_"
    }

    local function clearAll()
        for _,c in ipairs(scroll:GetChildren()) do if c:IsA("Frame") then c:Destroy() end end
    end

    local function makeRow(name, alive)
        local row = new("Frame", {Parent = scroll, Size = UDim2.new(1,-12,0,48), BackgroundColor3 = CONF.CARD})
        new("UICorner", {Parent = row, CornerRadius = UDim.new(0,8)})
        new("UIStroke", {Parent = row, Color = Color3.fromRGB(50,50,54), Thickness = 1})
        new("TextLabel", {Parent = row, Position = UDim2.new(0,12,0,8), Size = UDim2.new(1,-140,0,32), BackgroundTransparency = 1, Text = name, Font = CONF.FONT, TextSize = 15, TextColor3 = CONF.TEXT, TextXAlignment = Enum.TextXAlignment.Left})
        local dot = new("Frame", {Parent = row, Size = UDim2.new(0,14,0,14), Position = UDim2.new(1,-112,0,17), BackgroundColor3 = alive and Color3.fromRGB(70,200,70) or Color3.fromRGB(220,70,70)})
        new("UICorner", {Parent = dot, CornerRadius = UDim.new(1,0)})
        new("TextLabel", {Parent = row, Position = UDim2.new(1,-92,0,8), Size = UDim2.new(0,80,0,32), BackgroundTransparency = 1, Text = alive and "C√≤n" or "Kh√¥ng", Font = CONF.FONT, TextSize = 13, TextColor3 = CONF.MUTED})
    end

    local function scanWorkspaceForBosses()
        local found = {}
        pcall(function()
            for _,obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("Model") then
                    local nm = tostring(obj.Name):lower()
                    -- if name contains any keyword, consider it a boss candidate
                    for _,k in ipairs(KNOWN_BOSS_KEYWORDS) do
                        if nm:find(k) then
                            table.insert(found, obj)
                            break
                        end
                    end
                end
            end
        end)
        return found
    end

    local function refresh()
        clearAll()
        local arr = scanWorkspaceForBosses()
        local listed = {}
        if #arr == 0 then
            makeRow("Kh√¥ng t√¨m th·∫•y boss trong workspace", false)
        else
            for _,obj in ipairs(arr) do
                local nm = tostring(obj.Name)
                if not listed[nm] then
                    listed[nm] = true
                    local alive = false
                    pcall(function()
                        local hum = obj:FindFirstChildWhichIsA("Humanoid")
                        if hum and hum.Health and hum.Health > 0 then alive = true end
                    end)
                    makeRow(nm, alive)
                end
            end
        end
        task.wait(0.05)
        local tot = 0
        for _,v in ipairs(scroll:GetChildren()) do if v:IsA("Frame") then tot = tot + v.Size.Y.Offset + 8 end end
        scroll.CanvasSize = UDim2.new(0,0,0,tot + 12)
    end

    refresh()
    spawn(function()
        while true do
            if main.Visible then refresh(); task.wait(CONF.BOSS_REFRESH) else task.wait(1) end
        end
    end)
end

-- -------------------------
-- Page: Teleport (hi·ªÉn th·ªã only)
-- -------------------------
do
    local p = pages["teleport"]
    new("TextLabel", {Parent = p, Position = UDim2.new(0,16,0,12), Size = UDim2.new(1,-32,0,22), BackgroundTransparency = 1, Text = "Teleport (ch·ªâ hi·ªÉn th·ªã, KH√îNG TH·ª∞C HI·ªÜN)", Font = CONF.FONT, TextSize = 16, TextColor3 = CONF.TEXT})
    local info = new("TextLabel", {Parent = p, Position = UDim2.new(0,16,0,44), Size = UDim2.new(1,-32,0,36), BackgroundTransparency = 1, Text = "Danh s√°ch v·ªã tr√≠ ƒë·∫£o (b·∫°n c√≥ th·ªÉ copy t·ªça ƒë·ªô). Script KH√îNG th·ª±c hi·ªán teleport.", Font = CONF.FONT, TextSize = 13, TextColor3 = CONF.MUTED, TextWrapped = true})
    local list = new("ScrollingFrame", {Parent = p, Position = UDim2.new(0,16,0,96), Size = UDim2.new(1,-32,1,-112), BackgroundTransparency = 1, CanvasSize = UDim2.new(0,0,0,0), ScrollBarThickness = 8})
    new("UIListLayout", {Parent = list, Padding = UDim.new(0,8)})

    local function addItem(title, pos)
        local row = new("Frame", {Parent = list, Size = UDim2.new(1,-12,0,40), BackgroundColor3 = CONF.CARD})
        new("UICorner", {Parent = row, CornerRadius = UDim.new(0,8)})
        new("UIStroke", {Parent = row, Color = Color3.fromRGB(50,50,54), Thickness = 1})
        new("TextLabel", {Parent = row, Position = UDim2.new(0,12,0,6), Size = UDim2.new(0.6,-12,0,28), BackgroundTransparency = 1, Text = title, Font = CONF.FONT, TextSize = 14, TextColor3 = CONF.TEXT, TextXAlignment = Enum.TextXAlignment.Left})
        local coordsTxt = string.format("X:%d Y:%d Z:%d", math.floor(pos.X), math.floor(pos.Y), math.floor(pos.Z))
        new("TextLabel", {Parent = row, Position = UDim2.new(0.6,12,0,6), Size = UDim2.new(0.28,-12,0,28), BackgroundTransparency = 1, Text = coordsTxt, Font = CONF.FONT, TextSize = 12, TextColor3 = CONF.MUTED, TextXAlignment = Enum.TextXAlignment.Right})
    end

    for _,inf in ipairs(ISLANDS) do addItem(inf.name, inf.pos) end
    task.wait(0.05)
    local tot = 0
    for _,v in ipairs(list:GetChildren()) do if v:IsA("Frame") then tot = tot + v.Size.Y.Offset + 8 end end
    list.CanvasSize = UDim2.new(0,0,0,tot + 12)
end

-- -------------------------
-- Page: C√†i ƒê·∫∑t (UI Scale, reset pos, unload)
-- -------------------------
do
    local p = pages["settings"]
    new("TextLabel", {Parent = p, Position = UDim2.new(0,16,0,12), Size = UDim2.new(1,-32,0,22), BackgroundTransparency = 1, Text = "C√†i ƒê·∫∑t", Font = CONF.FONT, TextSize = 16, TextColor3 = CONF.TEXT})
    local card = new("Frame", {Parent = p, Position = UDim2.new(0,16,0,48), Size = UDim2.new(1,-32,0,160), BackgroundColor3 = CONF.CARD})
    new("UICorner", {Parent = card, CornerRadius = UDim.new(0,8)})

    new("TextLabel", {Parent = card, Position = UDim2.new(0,12,0,12), Size = UDim2.new(0,260,0,20), BackgroundTransparency = 1, Text = "T·ª∑ l·ªá UI (v√≠ d·ª• 1.0):", Font = CONF.FONT, TextSize = 13, TextColor3 = CONF.MUTED})
    local scaleBox = new("TextBox", {Parent = card, Position = UDim2.new(0,12,0,40), Size = UDim2.new(0,120,0,28), Text = "1.0", Font = CONF.FONT, TextSize = 14, TextColor3 = CONF.TEXT, ClearTextOnFocus = false})
    new("UICorner", {Parent = scaleBox, CornerRadius = UDim.new(0,6)})
    local resetBtn = new("TextButton", {Parent = card, Position = UDim2.new(0,148,0,40), Size = UDim2.new(0,120,0,28), Text = "Reset v·ªã tr√≠", Font = CONF.FONT, TextSize = 14, BackgroundColor3 = Color3.fromRGB(70,70,74), TextColor3 = CONF.TEXT})
    new("UICorner", {Parent = resetBtn, CornerRadius = UDim.new(0,6)})
    local unloadBtn = new("TextButton", {Parent = card, Position = UDim2.new(0,12,0,84), Size = UDim2.new(0,260,0,32), Text = "T·∫Øt UI (Unload)", Font = CONF.FONT, TextSize = 14, BackgroundColor3 = Color3.fromRGB(170,60,60), TextColor3 = CONF.TEXT})
    new("UICorner", {Parent = unloadBtn, CornerRadius = UDim.new(0,6)})

    scaleBox.FocusLost:Connect(function(enter)
        local v = tonumber(scaleBox.Text)
        if v and v >= 0.6 and v <= 1.6 then
            main.Size = UDim2.new(CONF.WIDTH_SCALE * v, 0, CONF.HEIGHT_SCALE * v, 0)
            main.Position = UDim2.new(0.5,0,0.5,0)
        else
            scaleBox.Text = "1.0"
        end
    end)

    resetBtn.MouseButton1Click:Connect(function()
        main.Position = UDim2.new(0.5,0,0.5,0)
        toggle.Position = UDim2.new(0.02,0,0.08,0)
    end)

    unloadBtn.MouseButton1Click:Connect(function()
        pcall(function() blur.Enabled = false; blur.Size = 0 end)
        screen:Destroy()
    end)
end

-- Dragging behavior for main & toggle (smooth)
do
    -- main drag
    local dragging, dragStart, startPos, dragInput
    main.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = main.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    main.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
    end)
    RunService.Heartbeat:Connect(function()
        if dragging and dragInput and dragStart and startPos then
            local delta = dragInput.Position - dragStart
            local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            pcall(function() main.Position = newPos end)
        end
    end)

    -- toggle drag
    local dragging2, dragStart2, startPos2, dragInput2
    toggle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging2 = true
            dragStart2 = input.Position
            startPos2 = toggle.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging2 = false end
            end)
        end
    end)
    toggle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput2 = input end
    end)
    RunService.Heartbeat:Connect(function()
        if dragging2 and dragInput2 and dragStart2 and startPos2 then
            local delta = dragInput2.Position - dragStart2
            local newPos = UDim2.new(startPos2.X.Scale, startPos2.X.Offset + delta.X, startPos2.Y.Scale, startPos2.Y.Offset + delta.Y)
            pcall(function() toggle.Position = newPos end)
        end
    end)
end

-- Open/Close with blur & smooth tween
local opened = true
local function openUI()
    if opened then return end
    opened = true
    main.Visible = true
    pcall(function() blur.Enabled = true; blur.Size = 6 end)
    local t = main.Position
    main.Position = UDim2.new(t.X.Scale, t.X.Offset, t.Y.Scale, t.Y.Offset - 30)
    TweenService:Create(main, TweenInfo.new(CONF.TWEEN, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = t}):Play()
end
local function closeUI()
    if not opened then return end
    opened = false
    pcall(function() blur.Size = 0; blur.Enabled = false end)
    local outPos = UDim2.new(main.Position.X.Scale, main.Position.X.Offset, main.Position.Y.Scale, main.Position.Y.Offset - 30)
    TweenService:Create(main, TweenInfo.new(CONF.TWEEN, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = outPos}):Play()
    delay(CONF.TWEEN + 0.02, function() if not opened then main.Visible = false end end)
end

toggle.MouseButton1Click:Connect(function() if opened then closeUI() else openUI() end end)
btnClose.MouseButton1Click:Connect(closeUI)

-- ensure only first page visible
for k,v in pairs(pages) do v.Visible = false end
pages["server"].Visible = true; pages["server"].Position = UDim2.new(0,0,0,0)

-- visuals
mainStroke.Color = CONF.ACCENT
tlabel.TextColor3 = Color3.new(1,1,1)

print("[ModzRO] UI t·∫£i xong ‚Äî Menu read-only, ti·∫øng Vi·ªát. N·∫øu c·∫ßn ch·ªânh m√†u/k√≠ch th∆∞·ªõc/danh s√°ch boss c·ª• th·ªÉ, b√°o m√¨nh nh√©.")
