--[[
VanDucModz - Full Teleport Script for Blox Fruits
Title: VanDucModz
Subtitle: VanDucModz Gaming
Author: VanDucModz
Notes: D√°n v√†o KRNL ho·∫∑c executor t∆∞∆°ng th√≠ch. N·∫øu Rayfield kh√¥ng load, ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c d√πng UI kh√°c.
Features:
 - TP ƒê·∫£o (ƒë·∫ßy ƒë·ªß islands)
 - TP Boss (Sea1/Sea2/Sea3) v·ªõi icon üü¢/üî¥ c·∫≠p nh·∫≠t 1s
 - TP Event (Sea1/Sea2/Sea3) v·ªõi icon üü¢/üî¥ c·∫≠p nh·∫≠t 1s
 - Teleport reliable: set CFrame loop + AlignPosition fallback + velocity fallback
 - Bay cao, kh√¥ng r∆°i n∆∞·ªõc, TP boss gi·ªØ kho·∫£ng c√°ch ~10 stud
--]]

-- ---------- UI LOAD ----------
local ok, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)
if not ok or not Rayfield then
    warn("Kh√¥ng th·ªÉ t·∫£i Rayfield UI. Ki·ªÉm tra k·∫øt n·ªëi ho·∫∑c d√πng executor h·ªó tr·ª£ HttpGet.")
    return
end

local Window = Rayfield:CreateWindow({
    Name = "VanDucModz",
    LoadingTitle = "VanDucModz",
    LoadingSubtitle = "VanDucModz Gaming",
    KeySystem = false
})
local Tab = Window:CreateTab("‚úàÔ∏è D·ªãch Chuy·ªÉn", 4483362458)

-- ---------- Services & Locals ----------
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- ---------- Config movement ----------
local FLY_ALT = 60
local CLOSE_DIST = 6
local LERP_NEAR = 0.22
local LERP_FAR = 0.5

-- ---------- Full lists (islands/bosses/events) ----------
local Islands = {
    "Starter Island","Jungle","Desert","Marine","Pirate Village","Shells Town","Skyland","Frozen Village",
    "Second Sea Island 1","Cafe","Arctic","Amber","Baratie",
    "Hydra Island","Third Sea Island 1","Longma Island"
}

local BossesBySea = {
    Sea1 = {
        "Saber Expert","Magma Admiral","Fishman Lord","Warden","Chief Warden","Swan",
        "Vice Admiral","Smoky","The Gorilla King","Bobby","Yeti"
    },
    Sea2 = {
        "Darkbeard","Cursed Captain","Jeremy","Fajita","Don Swan",
        "Smoke Admiral","Cursed Ship Boss","Awakened Ice Admiral","Diamond"
    },
    Sea3 = {
        "rip_indra","Stone","Island Empress","Kilo Admiral",
        "Captain Elephant","Beautiful Pirate","Cake Queen","Longma"
    }
}

local EventsBySea = {
    Sea1 = { },
    Sea2 = { "Factory","Ship Raid","Pirate Raid" },
    Sea3 = { "Cake Prince","Tushita Door","Sea Beast","Hydra Island Event","Mirage Event" }
}

-- ---------- State ----------
local currentSea = "Sea1"
local selectedIsland = nil
local selectedBoss = nil
local selectedEvent = nil
local tpIslandOn, tpBossOn, tpEventOn = false, false, false
local islandDropdown, bossDropdown, eventDropdown, islandToggle, bossToggle, eventToggle

-- ---------- Helper finders ----------
local function findInstanceByName(name)
    if not name then return nil end
    local ok, inst = pcall(function() return Workspace:FindFirstChild(name, true) end)
    if ok and inst then return inst end
    if Workspace:FindFirstChild("Enemies") then
        for _,v in pairs(Workspace.Enemies:GetDescendants()) do
            if v.Name == name then return v end
        end
    end
    if Workspace:FindFirstChild("Map") then
        for _,v in pairs(Workspace.Map:GetDescendants()) do
            if v.Name == name then return v end
        end
    end
    if Workspace:FindFirstChild("_WorldOrigin") and Workspace._WorldOrigin:FindFirstChild("Locations") then
        local loc = Workspace._WorldOrigin.Locations:FindFirstChild(name)
        if loc then return loc end
    end
    return nil
end

local function findIslandMarker(name)
    if Workspace:FindFirstChild("_WorldOrigin") and Workspace._WorldOrigin:FindFirstChild("Locations") then
        local loc = Workspace._WorldOrigin.Locations:FindFirstChild(name)
        if loc then return loc end
    end
    return findInstanceByName(name)
end

local function findBossInstance(name)
    if Workspace:FindFirstChild("Enemies") then
        for _,v in pairs(Workspace.Enemies:GetChildren()) do
            if v.Name == name then return v end
        end
    end
    return findInstanceByName(name)
end

local function findEventInstance(name)
    if Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild(name) then return Workspace.Map[name] end
    if Workspace:FindFirstChild(name) then return Workspace[name] end
    return findInstanceByName(name)
end

local function findSurfacePosition(pos)
    if not pos then return nil end
    local rayParams = RaycastParams.new()
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    local origin = Vector3.new(pos.X, pos.Y + 300, pos.Z)
    local res = Workspace:Raycast(origin, Vector3.new(0,-600,0), rayParams)
    if res and res.Position then return res.Position end
    return nil
end

local function getHRP()
    if LocalPlayer and LocalPlayer.Character then return LocalPlayer.Character:FindFirstChild("HumanoidRootPart") end
    return nil
end

-- ---------- Reliable teleport function (replacement) ----------
local movers = {}
local function createAlignMover(tag)
    local hrp = getHRP()
    if not hrp then return nil end
    local root = LocalPlayer.Character
    if root:FindFirstChild("VDM_Mover_"..tag) then pcall(function() root["VDM_Mover_"..tag]:Destroy() end) end
    local mover = Instance.new("Part")
    mover.Name = "VDM_Mover_"..tag
    mover.Size = Vector3.new(1,1,1)
    mover.Transparency = 1
    mover.Anchored = true
    mover.CanCollide = false
    mover.Parent = workspace

    local attMover = Instance.new("Attachment", mover)
    local attHRP = Instance.new("Attachment", hrp)
    attHRP.Name = "VDM_Att_HRP_"..tag

    local alignPos = Instance.new("AlignPosition", hrp)
    alignPos.Attachment0 = attHRP
    alignPos.Attachment1 = attMover
    alignPos.MaxForce = 1e6
    alignPos.Responsiveness = 200
    alignPos.RigidityEnabled = true

    local alignOri = Instance.new("AlignOrientation", hrp)
    alignOri.Attachment0 = attHRP
    alignOri.Attachment1 = attMover
    alignOri.MaxTorque = 1e6
    alignOri.Responsiveness = 200
    alignOri.RigidityEnabled = true

    movers[tag] = {mover = mover, attMover = attMover, attHRP = attHRP, alignPos = alignPos, alignOri = alignOri}
    return movers[tag]
end

local function destroyAlignMover(tag)
    if not movers[tag] then return end
    local t = movers[tag]
    pcall(function()
        if t.alignPos then t.alignPos:Destroy() end
        if t.alignOri then t.alignOri:Destroy() end
        if t.attHRP then t.attHRP:Destroy() end
        if t.mover then t.mover:Destroy() end
    end)
    movers[tag] = nil
end

local function setVelocityTowards(targetPos)
    local hrp = getHRP()
    if not hrp then return end
    local dir = (targetPos - hrp.Position)
    if dir.Magnitude <= 1 then return end
    local vel = dir.Unit * math.clamp(dir.Magnitude * 3, 50, 900)
    pcall(function() hrp.AssemblyLinearVelocity = vel end)
end

local function teleportToPosition(targetPos, tag, finalLanding)
    if not targetPos then return false end
    local hrp = getHRP()
    if not hrp then return false end
    local desiredHigh = Vector3.new(targetPos.X, targetPos.Y + FLY_ALT, targetPos.Z)
    local start = tick()
    while true do
        if not hrp or not hrp.Parent then return false end
        if tick() - start > 25 then return false end
        for i=1,3 do
            pcall(function() hrp.CFrame = CFrame.new(desiredHigh, targetPos) end)
            task.wait(0.06)
        end
        if (hrp.Position - desiredHigh).Magnitude < (FLY_ALT * 0.85) then
            if finalLanding then
                local surface = findSurfacePosition(targetPos) or targetPos
                pcall(function() hrp.CFrame = CFrame.new(surface + Vector3.new(0,10,0)) end)
            end
            return true
        end
        local mover = movers[tag] or createAlignMover(tag)
        if mover then
            pcall(function() mover.mover.Position = desiredHigh end)
            task.wait(0.08)
            if (hrp.Position - desiredHigh).Magnitude < (FLY_ALT * 0.85) then
                if finalLanding then
                    local surface = findSurfacePosition(targetPos) or targetPos
                    pcall(function() hrp.CFrame = CFrame.new(surface + Vector3.new(0,10,0)) end)
                end
                return true
            end
        end
        setVelocityTowards(desiredHigh)
        task.wait(0.08)
    end
end

-- ---------- UI Build ----------
local islandNames = {}
if Workspace:FindFirstChild("_WorldOrigin") and Workspace._WorldOrigin:FindFirstChild("Locations") then
    for _,v in pairs(Workspace._WorldOrigin.Locations:GetChildren()) do table.insert(islandNames, v.Name) end
end
for _,n in ipairs(Islands) do if not table.find(islandNames, n) then table.insert(islandNames, n) end end

islandDropdown = Tab:CreateDropdown({ Name = "üèùÔ∏è Ch·ªçn ƒê·∫£o", Options = islandNames, CurrentOption = "", Callback = function(opt) selectedIsland = opt end })
islandToggle = Tab:CreateToggle({ Name = "B·∫≠t/T·∫Øt TP ƒê·∫£o (Auto)", CurrentValue = false, Callback = function(v) tpIslandOn = v end })

bossDropdown = Tab:CreateDropdown({ Name = "üëë Ch·ªçn Boss (theo Sea)", Options = {}, CurrentOption = "", Callback = function(opt) selectedBoss = opt and opt:gsub("üü¢ ",""):gsub("üî¥ ","") end })
bossToggle = Tab:CreateToggle({ Name = "B·∫≠t/T·∫Øt TP Boss (Auto)", CurrentValue = false, Callback = function(v) tpBossOn = v end })

eventDropdown = Tab:CreateDropdown({ Name = "üéâ Ch·ªçn S·ª± Ki·ªán (theo Sea)", Options = {}, CurrentOption = "", Callback = function(opt) selectedEvent = opt and opt:gsub("üü¢ ",""):gsub("üî¥ ","") end })
eventToggle = Tab:CreateToggle({ Name = "B·∫≠t/T·∫Øt TP S·ª± Ki·ªán (Auto)", CurrentValue = false, Callback = function(v) tpEventOn = v end })

-- ---------- Background updater ----------
task.spawn(function()
    while task.wait(1) do
        local detected = "Sea1"
        if Workspace:FindFirstChild("_WorldOrigin") and Workspace._WorldOrigin:FindFirstChild("Locations") then
            for _,loc in pairs(Workspace._WorldOrigin.Locations:GetChildren()) do
                local n = tostring(loc.Name):lower()
                if n:find("cafe") or n:find("sea2") or n:find("second") then detected = "Sea2" end
                if n:find("hydra") or n:find("sea3") or n:find("third") then detected = "Sea3" end
            end
        end
        currentSea = detected
        local bl = BossesBySea[currentSea] or {}
        local bossOpts = {}
        for _,name in ipairs(bl) do
            local inst = findBossInstance(name)
            local alive = false
            if inst and inst:FindFirstChild("Humanoid") and inst.Humanoid.Health > 0 then alive = true end
            if alive then table.insert(bossOpts, "üü¢ "..name) else table.insert(bossOpts, "üî¥ "..name) end
        end
        pcall(function() bossDropdown:Set(bossOpts) end)
        local ev = EventsBySea[currentSea] or {}
        local evOpts = {}
        for _,name in ipairs(ev) do
            local inst = findEventInstance(name)
            if inst then table.insert(evOpts, "üü¢ "..name) else table.insert(evOpts, "üî¥ "..name) end
        end
        pcall(function() eventDropdown:Set(evOpts) end)
    end
end)

-- ---------- Main auto TP loop ----------
task.spawn(function()
    while task.wait(0.06) do
        local char = LocalPlayer.Character
        if not char then continue end
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then continue end
        if tpIslandOn and selectedIsland and selectedIsland ~= "" then
            local mark = findIslandMarker(selectedIsland)
            if mark then
                local pos = nil
                if mark:IsA("BasePart") then pos = mark.Position
                elseif mark:IsA("Model") and mark.PrimaryPart then pos = mark.PrimaryPart.Position
                elseif mark.Position then pos = mark.Position end
                if pos then local surface = findSurfacePosition(pos) or pos teleportToPosition(surface, "island", true) end
            end
        end
        if tpBossOn and selectedBoss and selectedBoss ~= "" then
            local inst = findBossInstance(selectedBoss)
            if inst and inst:FindFirstChild("Humanoid") and inst.Humanoid.Health > 0 then
                local bp = inst:FindFirstChild("HumanoidRootPart") or inst:FindFirstChildWhichIsA("BasePart")
                if bp then local safePos = bp.Position + Vector3.new(0,0,-10) local surface = findSurfacePosition(safePos) or safePos teleportToPosition(surface, "boss", true) end
            end
        end
        if tpEventOn and selectedEvent and selectedEvent ~= "" then
            local evinst = findEventInstance(selectedEvent)
            if evinst then
                local p = nil
                if evinst:IsA("BasePart") then p = evinst.Position
                elseif evinst:IsA("Model") and evinst.PrimaryPart then p = evinst.PrimaryPart.Position
                else local anyp = evinst:FindFirstChildWhichIsA and evinst:FindFirstChildWhichIsA("BasePart") if anyp then p = anyp.Position end end
                if p then local surface = findSurfacePosition(p) or p teleportToPosition(surface, "event", true) end
            end
        end
    end
end)

Rayfield:LoadConfiguration()
